
# 자기 자신을 다시 호출 하는 함수

# 재귀함수의 수행은 스택 자료구조를 이용한다. 
# 메인 메모리의 스택 공간에 연속해서 호출되는 함수가 적재됨 
# 스택 자료구조는 재귀 함수를 이용하여 간단하게 구현 할 수 있다. 

# 재귀함수 예제 

# 5-3.py

def recursive_func():
  print("재귀함수를 호출합니다.")
  recursive_func()
 
recursive_func()

# 재귀함수를 호출합니다 라는 문자열을 무한히 출력 
# RecursionError를 출력 후 멈춤 (재귀의 최대 깊이를 초과했다는 오류)


# 재귀 함수 종료 조건 
# 재귀 문제를 풀 때 반드시 종료 조건을 명시

# 5-4.py 재귀함수 종료예제 

def recur_func(i) :
  if i == 10 :
    return
  print(i, '번째 재귀 함수에서', i+1, "번째 재귀 함수를 호출합니다.")
  recur_func(i+1)
  print(i, '번째 재귀 함수를 종료합니다') 

recur_func(1) 

# 출력 
# 1 번째 재귀 함수에서 2 번째 재귀 함수를 호출합니다.
# 2 번째 재귀 함수에서 3 번째 재귀 함수를 호출합니다.
# 3 번째 재귀 함수에서 4 번째 재귀 함수를 호출합니다.
# 4 번째 재귀 함수에서 5 번째 재귀 함수를 호출합니다.
# 5 번째 재귀 함수에서 6 번째 재귀 함수를 호출합니다.
# 6 번째 재귀 함수에서 7 번째 재귀 함수를 호출합니다.
# 7 번째 재귀 함수에서 8 번째 재귀 함수를 호출합니다.
# 8 번째 재귀 함수에서 9 번째 재귀 함수를 호출합니다.
# 9 번째 재귀 함수에서 10 번째 재귀 함수를 호출합니다.
# 9 번째 재귀 함수를 종료합니다
# 8 번째 재귀 함수를 종료합니다
# 7 번째 재귀 함수를 종료합니다
# 6 번째 재귀 함수를 종료합니다
# 5 번째 재귀 함수를 종료합니다
# 4 번째 재귀 함수를 종료합니다
# 3 번째 재귀 함수를 종료합니다
# 2 번째 재귀 함수를 종료합니다
# 1 번째 재귀 함수를 종료합니다

# 5-5.py 팩토리얼 예제 

def factorial_recur(n) :
  if n <= 1 :
    return 1
  return n * factorial_recur(n-1)
print(factorial_recur(5))

# 5 * f(4) -> 4 * f(3) -> 3 * f(2) -> 2 * f(1) -> f(1) == 1     # 메모리에 적재 
# 출력은 거꾸로 연산
# 2 * 1 -> 3 * 2 -> 4 * 6 -> 5 * 24 -> 120(출력)

